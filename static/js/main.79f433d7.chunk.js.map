{"version":3,"sources":["store/actions.js","store/reducer.js","components/ListExchangeRates/ListExchangeRates.js","components/ListExchangeRates/ListExchangeRatesContainer.js","components/CurrencyConverter/CurrencyConverterContainer.js","components/CurrencyConverter/CurrencyConverter.js","components/Header/Header.js","components/Header/HeaderContainer.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ACTION_TYPES","START_LOADING","STOP_LOADING","SAVE_LIST_EXCHANGE_RATES","IS_CHECKED","UPDATE_SELECT_ASK","UPDATE_SELECT_BID","UPDATE_INPUT_ASK","UPDATE_INPUT_BID","loadListExchangeRates","dispatch","type","fetch","then","res","json","data","rates","payload","catch","error","console","log","finally","updateSelectAsk","value","updateSelectBid","updateInputAsk","updateInputBid","initialState","isLoading","listExchangeRates","checkedCurrencies","selectAsk","selectBid","inputAsk","inputBid","ListExchangeRates","this","props","a","Object","entries","className","map","item","key","onChange","e","target","Component","ListExchangeRatesContainer","connect","state","CurrencyConverterContainer","listCurrensies","name","id","Header","src","alt","to","HeaderContainer","Footer","href","store","createStore","action","toFixed","applyMiddleware","thunk","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79f433d7.chunk.js","sourcesContent":["export const ACTION_TYPES = {\n  START_LOADING: 'START_LOADING',\n  STOP_LOADING: 'STOP_LOADING',\n  SAVE_LIST_EXCHANGE_RATES: 'SAVE_LIST_EXCHANGE_RATES',\n  IS_CHECKED: 'IS_CHECKED',\n  UPDATE_SELECT_ASK: 'UPDATE_SELECT_ASK',\n  UPDATE_SELECT_BID: 'UPDATE_SELECT_BID',\n  UPDATE_INPUT_ASK: 'UPDATE_INPUT_ASK',\n  UPDATE_INPUT_BID: 'UPDATE_INPUT_BID',\n};\n\nconst urlExchangeRates =\n  'https://api.exchangeratesapi.io/latest';\n\nconst startLoading = () => ({\n  type: ACTION_TYPES.START_LOADING,\n});\n\nconst stopLoading = () => ({\n  type: ACTION_TYPES.STOP_LOADING,\n});\n\nconst saveListExchangeRates = data => ({\n  type: ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES,\n  payload: data\n})\n\nexport const loadListExchangeRates = () => dispatch => {\n  dispatch(startLoading());\n\n  fetch(urlExchangeRates)\n    .then(res => res.json())\n    .then(( { rates } ) => {\n      dispatch(saveListExchangeRates(rates))\n    })\n    .catch(error => console.log(error))\n    .finally(() => dispatch(stopLoading()))\n};\n\nexport const isChecked = id => ({\n  type: ACTION_TYPES.IS_CHECKED,\n  payload: id\n});\n\nexport const updateSelectAsk = (value) => ({\n  type: ACTION_TYPES.UPDATE_SELECT_ASK,\n  payload: value,\n});\n\nexport const updateSelectBid = (value) => ({\n  type: ACTION_TYPES.UPDATE_SELECT_BID,\n  payload: value,\n});\n\nexport const updateInputAsk = (value) => ({\n  type: ACTION_TYPES.UPDATE_INPUT_ASK,\n  payload: value,\n});\n\nexport const updateInputBid = (value) => ({\n  type: ACTION_TYPES.UPDATE_INPUT_BID,\n  payload: value,\n});\n","import { ACTION_TYPES } from './actions';\n\nconst initialState = {\n  isLoading: false,\n  listExchangeRates: null,\n  checkedCurrencies: [],\n  selectAsk: 1,\n  selectBid: 1,\n  inputAsk: 1,\n  inputBid: 1,\n}\n\nexport default function reducer(state = initialState, action) {\n  const { payload } = action;\n\n  switch (action.type) {\n    case ACTION_TYPES.START_LOADING: {\n      return {\n        ...state,\n        isLoading: true,\n      };\n    }\n\n    case ACTION_TYPES.STOP_LOADING: {\n      return {\n        ...state,\n        isLoading: false,\n      };\n    }\n\n    case ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES: {\n      return {\n        ...state,\n        listExchangeRates: payload,\n      };\n    }\n\n    case ACTION_TYPES.IS_CHECKED: {\n      return {\n        ...state,\n\n      }\n    }\n\n    case ACTION_TYPES.UPDATE_SELECT_ASK: {\n      return {\n        ...state,\n        selectAsk: payload,        \n        inputAsk: (payload / state.selectBid * state.inputBid).toFixed(4)        \n      };\n    }\n    \n    case ACTION_TYPES.UPDATE_SELECT_BID: {      \n      return {\n        ...state,\n        selectBid: payload, \n        inputAsk: (state.selectAsk / payload * state.inputBid).toFixed(4)       \n      };\n    }\n   \n    case ACTION_TYPES.UPDATE_INPUT_ASK: {\n      return {\n        ...state,\n        inputAsk: payload,\n        inputBid: (state.selectBid / state.selectAsk * payload).toFixed(4)\n      };\n    }\n    \n    case ACTION_TYPES.UPDATE_INPUT_BID: {\n      return {\n        ...state,\n        inputBid: payload,\n        inputAsk: (state.selectAsk / state.selectBid * payload).toFixed(4)\n      };\n    }\n    \n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport './ListExchangeRates.css';\n\nexport default class ListExchangeRates extends Component {\n\n  render() {\n    const { listExchangeRates } = this.props;\n    let a = [];\n    if (listExchangeRates) {\n      a = Object.entries(listExchangeRates);\n      return (\n        <div className=\"page-currencies\">\n          <div className=\"content\">\n      \n            {a.map(item => (\n              <div key={item[0]} className=\"page-currencies__list\">\n                <div className=\"page-currencies__currency\">{`${item[0]} : ${item[1]}`}</div>\n                <input\n                  className=\"page-currencies__check\"\n                  type=\"checkbox\"\n                  onChange={(e) => console.log(e.target.value)}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    } else {\n      return 'loading...';\n    }\n    \n  }\n}\n","import {connect} from 'react-redux';\nimport ListExchangeRates from './ListExchangeRates';\n\nfunction mapStateToProps(state) {\n  return {\n    listExchangeRates: state.listExchangeRates,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {   \n  }  \n}\n\nexport const ListExchangeRatesContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(ListExchangeRates);\n","import {connect} from 'react-redux';\nimport  CurrencyConverter from './CurrencyConverter';\nimport { \n  updateSelectAsk,\n  updateSelectBid,\n  updateInputAsk,\n  updateInputBid,\n} from '../../store/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    listExchangeRates: state.listExchangeRates,\n    selectAsk: state.selectAsk,\n    selectBid: state.selectBid,\n    inputAsk: state.inputAsk,\n    inputBid: state.inputBid,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateSelectAsk: value => dispatch(updateSelectAsk(value)),\n    updateSelectBid: value => dispatch(updateSelectBid(value)),\n    updateInputAsk: value => dispatch(updateInputAsk(value)),\n    updateInputBid: value => dispatch(updateInputBid(value)),\n  };  \n}\n\nexport const CurrencyConverterContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(CurrencyConverter);\n","import React from 'react';\n\nexport default function CurrencyConverter(props) { \n\n  if (props.listExchangeRates) {\n    const listCurrensies = Object.entries(props.listExchangeRates).map(item => (      \n      <option value={item[1]} key={item}>{item[0]}</option>\n    ));\n   \n    return (\n      <div className=\"page-converter\">\n        <div className=\"content\">\n          <div className=\"my\">\n            <select\n              name=\"bid\"\n              id=\"\"\n              className=\"bid\"\n              onChange={e => props.updateSelectBid(e.target.value)}\n            >\n              {listCurrensies}\n            </select>\n            <input\n              type=\"text\"\n              onChange={e => props.updateInputBid(e.target.value)}\n              value={props.inputBid}\n            />\n          </div>\n          <div className=\"want\">\n            <select\n              name=\"ask\"\n              id=\"\"\n              className=\"ask\"\n              onChange={e => props.updateSelectAsk(e.target.value)}\n            >\n              {listCurrensies}\n            </select>\n            <input\n              type=\"text\"\n              onChange={e => props.updateInputAsk(e.target.value)}\n              value={props.inputAsk}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return 'Loading......';\n  }\n}\n","import React, { Component } from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport './Header.css';\n\n\nexport class Header extends Component {\n\n  componentDidMount() {\n    this.props.loadListExchangeRates();\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <div className=\"content\">\n          <div className=\"header__inner\">\n            <img\n              src=\"./images/logo.png\"\n              alt=\"currency exchange\"\n              className=\"header__logo\"\n            />\n            <div className=\"header__links\">\n              <Route>\n                <Link to=\"/\" className=\"header__link\">Currencies</Link>\n              </Route>\n              <Route>\n                <Link to=\"/converter\" className=\"header__link\">Converter</Link>\n              </Route>\n            </div>\n          </div>\n        </div>\n      </header>\n\n    )\n  }\n}\n","import {connect} from 'react-redux';\nimport  {Header}  from './Header';\nimport {loadListExchangeRates} from '../../store/actions';\n\nfunction mapStateToProps(state) {\n return {\n\n }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadListExchangeRates: () => dispatch(loadListExchangeRates()),\n  }\n}\n\nexport const HeaderContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(Header);","import React from 'react';\nimport './Footer.css';\n\n\nexport const Footer = () => (\n  <footer className=\"footer\">\n    <div className=\"content\">\n   \n\n      <div className=\"footer__bottom-part\">\n        <p className=\"footer__copyright\">\n          © 2019 Finance Inc.\n          </p>\n\n        <div className=\"footer__misc\">\n          <div className=\"footer__bottom-links links\">\n            <a href=\"##\" className=\"links__link\">\n              Privacy policy\n          </a>\n            <a href=\"##\" className=\"links__link\">\n              Terms of  use\n          </a>\n            <a href=\"##\" className=\"links__link\">\n              Pricing\n          </a>\n          </div>\n\n          <div className=\"footer__social social\">\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/tw.svg\" alt=\"Twitter\" />\n            </a>\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/ig.svg\" alt=\"Instagram\" />\n            </a>\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/fb.svg\" alt=\"Facebook\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </footer>\n)\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducer';\nimport { ListExchangeRatesContainer }\n  from './components/ListExchangeRates/ListExchangeRatesContainer';\nimport { CurrencyConverterContainer }\n  from './components/CurrencyConverter/CurrencyConverterContainer';\nimport { HeaderContainer } from './components/Header/HeaderContainer';\nimport { Footer } from './components/Footer/Footer';\nimport './styles/index.css';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HeaderContainer />\n        <Switch>\n          <Route path=\"/\" exact component={ListExchangeRatesContainer} />\n          <Route path=\"/converter\" exact component={CurrencyConverterContainer} />\n        </Switch>\n        <Footer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}