{"version":3,"sources":["store/actions.js","store/reducer.js","components/ListExchangeRates/ListExchangeRatesContainer.js","components/ListExchangeRates/ListExchangeRates.js","components/CurrencyConverter/CurrencyConverterContainer.js","components/CurrencyConverter/CurrencyConverter.js","components/Header/Header.js","components/Header/HeaderContainer.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ACTION_TYPES","START_LOADING","STOP_LOADING","SAVE_LIST_EXCHANGE_RATES","SELECT_CURRENCY","UPDATE_SELECT_ASK","UPDATE_SELECT_BID","UPDATE_INPUT_ASK","UPDATE_INPUT_BID","SET_MAIN_CURRENCY","loadListExchangeRates","dispatch","type","fetch","then","res","json","data","rates","payload","catch","error","finally","selectCurrency","id","updateSelectAsk","value","updateSelectBid","updateInputAsk","updateInputBid","setMainCurrency","initialState","isLoading","listExchangeRates","selectAsk","selectBid","inputAsk","inputBid","mainCurrency","ListExchangeRatesContainer","connect","state","target","props","usd","find","item","listCurrency","map","key","className","onChange","defaultValue","toFixed","onClick","src","alt","CurrencyConverterContainer","listCurrensies","sort","name","e","Header","this","to","Component","HeaderContainer","Footer","href","store","createStore","action","exchangeRates","Object","entries","copyListExRates","selectedCurrency","splice","indexOf","unshift","applyMiddleware","thunk","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1a8c4a0.chunk.js","sourcesContent":["export const ACTION_TYPES = {\r\n  START_LOADING: 'START_LOADING',\r\n  STOP_LOADING: 'STOP_LOADING',\r\n  SAVE_LIST_EXCHANGE_RATES: 'SAVE_LIST_EXCHANGE_RATES',\r\n  SELECT_CURRENCY: 'SELECT_CURRENCY',\r\n  UPDATE_SELECT_ASK: 'UPDATE_SELECT_ASK',\r\n  UPDATE_SELECT_BID: 'UPDATE_SELECT_BID',\r\n  UPDATE_INPUT_ASK: 'UPDATE_INPUT_ASK',\r\n  UPDATE_INPUT_BID: 'UPDATE_INPUT_BID',\r\n  SET_MAIN_CURRENCY: 'SET_MAIN_CURRENCY'\r\n};\r\n\r\nconst exchangeRatesUrl =\r\n  'https://api.exchangeratesapi.io/latest?base=USD';\r\n\r\nconst startLoading = () => ({\r\n  type: ACTION_TYPES.START_LOADING,\r\n});\r\n\r\nconst stopLoading = () => ({\r\n  type: ACTION_TYPES.STOP_LOADING,\r\n});\r\n\r\nconst saveListExchangeRates = data => ({\r\n  type: ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES,\r\n  payload: data\r\n});\r\n\r\nexport const loadListExchangeRates = () => dispatch => {\r\n  dispatch(startLoading());\r\n\r\n  fetch(exchangeRatesUrl)\r\n    .then(res => res.json())\r\n    .then(({ rates }) => {\r\n      dispatch(saveListExchangeRates(rates))\r\n    })\r\n    .catch(error => { throw (error) }\r\n    )\r\n    .finally(() => dispatch(stopLoading()))\r\n};\r\n\r\nexport const selectCurrency = id => ({\r\n  type: ACTION_TYPES.SELECT_CURRENCY,\r\n  payload: id\r\n});\r\n\r\nexport const updateSelectAsk = (value) => ({\r\n  type: ACTION_TYPES.UPDATE_SELECT_ASK,\r\n  payload: value,\r\n});\r\n\r\nexport const updateSelectBid = (value) => ({\r\n  type: ACTION_TYPES.UPDATE_SELECT_BID,\r\n  payload: value,\r\n});\r\n\r\nexport const updateInputAsk = (value) => ({\r\n  type: ACTION_TYPES.UPDATE_INPUT_ASK,\r\n  payload: value,\r\n});\r\n\r\nexport const updateInputBid = (value) => ({\r\n  type: ACTION_TYPES.UPDATE_INPUT_BID,\r\n  payload: value,\r\n});\r\n\r\nexport const setMainCurrency = (value) => ({\r\n  type: ACTION_TYPES.SET_MAIN_CURRENCY,\r\n  payload: value,\r\n});\r\n","import { ACTION_TYPES } from './actions';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  listExchangeRates: null,\r\n  selectAsk: null,\r\n  selectBid: null,\r\n  inputAsk: 100,\r\n  inputBid: 100,\r\n  mainCurrency: 1,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  const { payload } = action;\r\n\r\n  switch (action.type) {\r\n    case ACTION_TYPES.START_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.STOP_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES: { \r\n      const exchangeRates = Object.entries(payload).sort();     \r\n      return {\r\n        ...state,\r\n        selectAsk: exchangeRates[0][1],\r\n        selectBid: exchangeRates[0][1],        \r\n        listExchangeRates: exchangeRates,\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.SELECT_CURRENCY: {\r\n      let copyListExRates = [...state.listExchangeRates];\r\n\r\n      for (let item of copyListExRates) {\r\n        if (payload === item[0]) {\r\n          let selectedCurrency =\r\n          copyListExRates.splice(copyListExRates.indexOf(item), 1);\r\n          copyListExRates.unshift(selectedCurrency[0]);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        listExchangeRates: copyListExRates\r\n      }\r\n    }\r\n\r\n    case ACTION_TYPES.UPDATE_SELECT_ASK: {\r\n      return {\r\n        ...state,\r\n        selectAsk: payload,\r\n        inputAsk: (payload / state.selectBid * state.inputBid).toFixed(2)\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.UPDATE_SELECT_BID: {\r\n      return {\r\n        ...state,\r\n        selectBid: payload,\r\n        inputAsk: (state.selectAsk / payload * state.inputBid).toFixed(2)\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.UPDATE_INPUT_ASK: {\r\n      return {\r\n        ...state,\r\n        inputAsk: payload,\r\n        inputBid: (state.selectBid / state.selectAsk * payload).toFixed(2)\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.UPDATE_INPUT_BID: {\r\n      return {\r\n        ...state,\r\n        inputBid: payload,\r\n        inputAsk: (state.selectAsk / state.selectBid * payload).toFixed(2)\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.SET_MAIN_CURRENCY: {\r\n      return {\r\n        ...state,\r\n        mainCurrency: payload,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport ListExchangeRates from './ListExchangeRates';\r\nimport { setMainCurrency, selectCurrency } from '../../store/actions'\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    listExchangeRates: state.listExchangeRates,\r\n    mainCurrency: state.mainCurrency,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return { \r\n    setMainCurrency: value => dispatch(setMainCurrency(value.target.value)),\r\n    selectCurrency: value => dispatch(selectCurrency(value)),  \r\n  }  \r\n}\r\n\r\nexport const ListExchangeRatesContainer = connect(\r\n  mapStateToProps, mapDispatchToProps\r\n)(ListExchangeRates);\r\n","import React from 'react';\r\nimport './ListExchangeRates.css';\r\n\r\nexport default function ListExchangeRates(props) {\r\n  const {\r\n    listExchangeRates,\r\n    setMainCurrency,\r\n    mainCurrency,\r\n    selectCurrency,\r\n  } = props;\r\n\r\n  if (listExchangeRates) {\r\n    const usd = listExchangeRates.find(item => item[0] === 'USD');\r\n    const listCurrency = listExchangeRates.map(item => (\r\n      <option        \r\n        value={item[1]}\r\n        key={item[0]}\r\n      >\r\n        {item[0]}\r\n      </option>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"page-currencies\">\r\n        <div className=\"content\">\r\n          <h1 className=\"page-currencies__title\">\r\n            EXCHANGE RATE          \r\n          </h1>\r\n          <div className=\"wrapper\">\r\n            <div className=\"page-currencies__main-currency\">\r\n              Main Currency\r\n              <select\r\n                className=\"page-currencies__select\"\r\n                onChange={setMainCurrency}\r\n                defaultValue={usd[1]}\r\n              >\r\n                {listCurrency}\r\n              </select>\r\n            </div>           \r\n              <div className=\"list-title\">\r\n                <span className=\"list-title__name1\">Name</span>\r\n                <span className=\"list-title__price1\">Price</span>\r\n                <span className=\"list-title__name2\">Name</span>\r\n                <span className=\"list-title__price2\">Price</span>\r\n              </div>          \r\n            <div className=\"page-currencies__list-container\">\r\n              {listExchangeRates.map((item) => (\r\n                <div key={item[0]} className=\"page-currencies__list\">\r\n                  <div className=\"page-currencies__currency\">\r\n                    <span>{item[0]}</span>\r\n                    <span>{(item[1] / mainCurrency).toFixed(2)}</span>\r\n                    <span\r\n                      onClick={() => selectCurrency(item[0])}\r\n                    >\r\n                      <img\r\n                        src='./images/star.jpg'\r\n                        alt=\"star\"\r\n                        className=\"page-currencies__star\"\r\n                      />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return 'loading...';\r\n  }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport  CurrencyConverter from './CurrencyConverter';\r\nimport { \r\n  updateSelectAsk,\r\n  updateSelectBid,\r\n  updateInputAsk,\r\n  updateInputBid,\r\n} from '../../store/actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    listExchangeRates: state.listExchangeRates,\r\n    selectAsk: state.selectAsk,\r\n    selectBid: state.selectBid,\r\n    inputAsk: state.inputAsk,\r\n    inputBid: state.inputBid,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    updateSelectAsk: value => dispatch(updateSelectAsk(value)),\r\n    updateSelectBid: value => dispatch(updateSelectBid(value)),\r\n    updateInputAsk: value => dispatch(updateInputAsk(value)),\r\n    updateInputBid: value => dispatch(updateInputBid(value)),\r\n  };  \r\n}\r\n\r\nexport const CurrencyConverterContainer = connect(\r\n  mapStateToProps, mapDispatchToProps\r\n)(CurrencyConverter);\r\n","import React from 'react';\r\nimport './CurrencyConverter.css';\r\n\r\nexport default function CurrencyConverter(props) {\r\n  const {\r\n    listExchangeRates,\r\n    updateSelectBid,\r\n    updateInputBid,\r\n    updateSelectAsk,\r\n    updateInputAsk,\r\n    selectAsk,\r\n    selectBid,\r\n    inputBid,\r\n    inputAsk,\r\n  } = props;\r\n\r\n  if (listExchangeRates) {   \r\n    const listCurrensies = listExchangeRates.sort().map(item => (\r\n      <option\r\n        value={item[1]}        \r\n        key={item[0]}\r\n      >\r\n        {item[0]}\r\n      </option>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"page-converter\">\r\n        <div className=\"content\">\r\n          <h2 className=\"page-converter__title\">CURRENCY CONVERTER</h2>\r\n          <h3 className=\"page-converter__subtitle\">Based on exchange rate of central bank</h3>\r\n          <div className=\"converter\">\r\n            <div className=\"converter__header\">\r\n              <span>I HAVE</span>\r\n              <span>I'LL GET</span>\r\n            </div>\r\n            <div className=\"converter__wrapper\">\r\n              <div className=\"converter__have\">\r\n                <select\r\n                  name=\"bid\"\r\n                  className=\"converter__select\"\r\n                  onChange={e => updateSelectBid(e.target.value)}\r\n                  value={selectBid}\r\n                >\r\n                  {listCurrensies}\r\n                </select>\r\n                <input\r\n                  className=\"converter__input\"\r\n                  type=\"text\"\r\n                  onChange={e => updateInputBid(e.target.value)}\r\n                  value={inputBid}\r\n                />\r\n              </div>\r\n              <div className=\"converter__midle\">\r\n                <img className=\"converter__img\" src=\"./images/vector.svg\" alt=\"arows\" />\r\n              </div>\r\n              <div className=\"converter__want\">\r\n                <select\r\n                  name=\"ask\"\r\n                  className=\"converter__select\"\r\n                  onChange={e => updateSelectAsk(e.target.value)}\r\n                  value={selectAsk}\r\n                >\r\n                  {listCurrensies}\r\n                </select>\r\n                <input\r\n                  className=\"converter__input\"\r\n                  type=\"text\"\r\n                  onChange={e => updateInputAsk(e.target.value)}\r\n                  value={inputAsk}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return 'Loading......';\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nexport class Header extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.loadListExchangeRates();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"content\">\r\n          <div className=\"header__inner\">\r\n            <img\r\n              src=\"./images/logo.png\"\r\n              alt=\"currency exchange\"\r\n              className=\"header__logo\"\r\n            />\r\n            <div className=\"header__links\">\r\n              <Route>\r\n                <Link to=\"/\" className=\"header__link\">Currencies</Link>\r\n              </Route>\r\n              <Route>\r\n                <Link to=\"/converter\" className=\"header__link\">Converter</Link>\r\n              </Route>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n","import {connect} from 'react-redux';\r\nimport {Header} from './Header';\r\nimport {loadListExchangeRates} from '../../store/actions';\r\n\r\nfunction mapStateToProps(state) {\r\n return {}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    loadListExchangeRates: () => dispatch(loadListExchangeRates()),\r\n  }\r\n}\r\n\r\nexport const HeaderContainer = connect(\r\n  mapStateToProps, mapDispatchToProps\r\n)(Header);\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nexport const Footer = () => (\r\n  <footer className=\"footer\">\r\n    <div className=\"content\">   \r\n\r\n      <div className=\"footer__bottom-part\">\r\n        <p className=\"footer__copyright\">\r\n          © 2019 Finance Inc.\r\n          </p>\r\n\r\n        <div className=\"footer__misc\">\r\n          <div className=\"footer__bottom-links links\">\r\n            <a href=\"##\" className=\"links__link\">\r\n              Privacy policy\r\n          </a>\r\n            <a href=\"##\" className=\"links__link\">\r\n              Terms of  use\r\n          </a>\r\n            <a href=\"##\" className=\"links__link\">\r\n              Pricing\r\n          </a>\r\n          </div>\r\n\r\n          <div className=\"footer__social social\">\r\n            <a href=\"##\" className=\"social__link\">\r\n              <img src=\"./images/tw.svg\" alt=\"Twitter\" />\r\n            </a>\r\n            <a href=\"##\" className=\"social__link\">\r\n              <img src=\"./images/ig.svg\" alt=\"Instagram\" />\r\n            </a>\r\n            <a href=\"##\" className=\"social__link\">\r\n              <img src=\"./images/fb.svg\" alt=\"Facebook\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </footer>\r\n)\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './store/reducer';\r\nimport { ListExchangeRatesContainer }\r\n  from './components/ListExchangeRates/ListExchangeRatesContainer';\r\nimport { CurrencyConverterContainer }\r\n  from './components/CurrencyConverter/CurrencyConverterContainer';\r\nimport { HeaderContainer } from './components/Header/HeaderContainer';\r\nimport { Footer } from './components/Footer/Footer';\r\nimport './styles/index.css';\r\nimport {\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <HeaderContainer />       \r\n        <Switch>\r\n          <Route path=\"/\" exact component={ListExchangeRatesContainer} />\r\n          <Route path=\"/converter\" component={CurrencyConverterContainer} />\r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}