{"version":3,"sources":["store/actions.js","store/reducer.js","components/ListExchangeRates/ListExchangeRatesContainer.js","components/ListExchangeRates/ListExchangeRates.js","components/CurrencyConverter/CurrencyConverterContainer.js","components/CurrencyConverter/CurrencyConverter.js","components/Header/Header.js","components/Header/HeaderContainer.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ACTION_TYPES","START_LOADING","STOP_LOADING","SAVE_LIST_EXCHANGE_RATES","IS_SELECTED","UPDATE_SELECT_ASK","UPDATE_SELECT_BID","UPDATE_INPUT_ASK","UPDATE_INPUT_BID","SET_MAIN_CURRENCY","loadListExchangeRates","dispatch","type","fetch","then","res","json","data","rates","payload","catch","error","console","log","finally","isSelected","id","updateSelectAsk","value","updateSelectBid","updateInputAsk","updateInputBid","setMainCurrency","initialState","isLoading","listExchangeRates","selectAsk","selectBid","inputAsk","inputBid","mainCurrency","ListExchangeRatesContainer","connect","state","target","props","selectCurrency","map","item","selected","key","className","onChange","toFixed","onClick","src","alt","CurrencyConverterContainer","listCurrensies","e","name","Header","this","to","Component","HeaderContainer","Footer","href","store","createStore","action","exchangeRates","Object","entries","copyListExRates","slice","selectedCurrency","splice","indexOf","unshift","applyMiddleware","thunk","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0bc566c.chunk.js","sourcesContent":["export const ACTION_TYPES = {\n  START_LOADING: 'START_LOADING',\n  STOP_LOADING: 'STOP_LOADING',\n  SAVE_LIST_EXCHANGE_RATES: 'SAVE_LIST_EXCHANGE_RATES',\n  IS_SELECTED: 'IS_SELECTED',\n  UPDATE_SELECT_ASK: 'UPDATE_SELECT_ASK',\n  UPDATE_SELECT_BID: 'UPDATE_SELECT_BID',\n  UPDATE_INPUT_ASK: 'UPDATE_INPUT_ASK',\n  UPDATE_INPUT_BID: 'UPDATE_INPUT_BID',\n  SET_MAIN_CURRENCY: 'SET_MAIN_CURRENCY'\n};\n\nconst urlExchangeRates =\n  'https://api.exchangeratesapi.io/latest?base=USD';\n\nconst startLoading = () => ({\n  type: ACTION_TYPES.START_LOADING,\n});\n\nconst stopLoading = () => ({\n  type: ACTION_TYPES.STOP_LOADING,\n});\n\nconst saveListExchangeRates = data => ({\n  type: ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES,\n  payload: data\n})\n\nexport const loadListExchangeRates = () => dispatch => {\n  dispatch(startLoading());\n\n  fetch(urlExchangeRates)\n    .then(res => res.json())\n    .then(( { rates } ) => {\n      dispatch(saveListExchangeRates(rates))\n    })\n    .catch(error => console.log(error))\n    .finally(() => dispatch(stopLoading()))\n};\n\nexport const isSelected = id => ({\n  type: ACTION_TYPES.IS_SELECTED,\n  payload: id\n});\n\nexport const updateSelectAsk = (value) => ({\n  type: ACTION_TYPES.UPDATE_SELECT_ASK,\n  payload: value,\n});\n\nexport const updateSelectBid = (value) => ({\n  type: ACTION_TYPES.UPDATE_SELECT_BID,\n  payload: value,\n});\n\nexport const updateInputAsk = (value) => ({\n  type: ACTION_TYPES.UPDATE_INPUT_ASK,\n  payload: value,\n});\n\nexport const updateInputBid = (value) => ({\n  type: ACTION_TYPES.UPDATE_INPUT_BID,\n  payload: value,\n});\n\nexport const setMainCurrency = (value) => ({\n  type: ACTION_TYPES.SET_MAIN_CURRENCY,\n  payload: value,\n})\n","import { ACTION_TYPES } from './actions';\n\nconst initialState = {\n  isLoading: false,\n  listExchangeRates: null,\n  selectAsk: null,\n  selectBid: null,\n  inputAsk: 100,\n  inputBid: 100,\n  mainCurrency: 1,\n}\n\nexport default function reducer(state = initialState, action) {\n  const { payload } = action;\n\n  switch (action.type) {\n    case ACTION_TYPES.START_LOADING: {\n      return {\n        ...state,\n        isLoading: true,\n      };\n    }\n\n    case ACTION_TYPES.STOP_LOADING: {\n      return {\n        ...state,\n        isLoading: false,\n      };\n    }\n\n    case ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES: { \n      const exchangeRates = Object.entries(payload);     \n      return {\n        ...state,\n        selectAsk: exchangeRates[0][1],\n        selectBid: exchangeRates[0][1],        \n        listExchangeRates: exchangeRates,\n      };\n    }\n\n    case ACTION_TYPES.IS_SELECTED: {\n      let copyListExRates = state.listExchangeRates.slice();\n\n      for (let item of copyListExRates) {\n        if (payload === item[0]) {\n          let selectedCurrency =\n          copyListExRates.splice(copyListExRates.indexOf(item), 1);\n          copyListExRates.unshift(selectedCurrency[0]);\n        }\n      }\n\n      return {\n        ...state,\n        listExchangeRates: copyListExRates\n      }\n    }\n\n    case ACTION_TYPES.UPDATE_SELECT_ASK: {\n      return {\n        ...state,\n        selectAsk: payload,\n        inputAsk: (payload / state.selectBid * state.inputBid).toFixed(2)\n      };\n    }\n\n    case ACTION_TYPES.UPDATE_SELECT_BID: {\n      return {\n        ...state,\n        selectBid: payload,\n        inputAsk: (state.selectAsk / payload * state.inputBid).toFixed(2)\n      };\n    }\n\n    case ACTION_TYPES.UPDATE_INPUT_ASK: {\n      return {\n        ...state,\n        inputAsk: payload,\n        inputBid: (state.selectBid / state.selectAsk * payload).toFixed(2)\n      };\n    }\n\n    case ACTION_TYPES.UPDATE_INPUT_BID: {\n      return {\n        ...state,\n        inputBid: payload,\n        inputAsk: (state.selectAsk / state.selectBid * payload).toFixed(2)\n      };\n    }\n\n    case ACTION_TYPES.SET_MAIN_CURRENCY: {\n      return {\n        ...state,\n        mainCurrency: payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {connect} from 'react-redux';\nimport ListExchangeRates from './ListExchangeRates';\nimport { setMainCurrency, isSelected } from '../../store/actions'\n\nfunction mapStateToProps(state) {\n  return {\n    listExchangeRates: state.listExchangeRates,\n    mainCurrency: state.mainCurrency,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { \n    setMainCurrency: value => dispatch(setMainCurrency(value.target.value)),\n    isSelected: value => dispatch(isSelected(value)),  \n  }  \n}\n\nexport const ListExchangeRatesContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(ListExchangeRates);\n","import React from 'react';\nimport './ListExchangeRates.css';\n\nexport default function ListExchangeRates(props) {\n  const {\n    listExchangeRates,\n    setMainCurrency,\n    mainCurrency,\n    isSelected,\n  } = props;\n\n  if (listExchangeRates) {\n    let selectCurrency = listExchangeRates.map(item => (\n      <option\n        selected={item[0] === 'USD' ? true : false}\n        value={item[1]}\n        key={item[0]}\n      >\n        {item[0]}\n      </option>\n    ));\n\n    return (\n      <div className=\"page-currencies\">\n        <div className=\"content\">\n\n          <div className=\"page-currencies__main-currency\">\n            Main Currency\n          <select\n              className=\"page-currencies__select\"\n              onChange={setMainCurrency}\n            >\n              {selectCurrency}\n            </select>\n          </div>\n\n          <div className=\"page-currencies__list-container\">\n            {listExchangeRates.map((item) => (\n              <div key={item[0]} className=\"page-currencies__list\">\n                <div className=\"page-currencies__currency\">\n                  {`${item[0]} : ${(item[1] / mainCurrency).toFixed(2)}`}\n                </div>\n                <span\n                  onClick={() => isSelected(item[0])}\n                >\n                  <img\n                    src='./images/star.jpg'\n                    alt=\"star\"\n                    className=\"page-currencies__star\"\n                  />\n                </span>\n              </div>\n            ))}\n          </div>\n\n        </div>\n      </div>\n    )\n  } else {\n    return 'loading...';\n  }\n}\n","import {connect} from 'react-redux';\nimport  CurrencyConverter from './CurrencyConverter';\nimport { \n  updateSelectAsk,\n  updateSelectBid,\n  updateInputAsk,\n  updateInputBid,\n} from '../../store/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    listExchangeRates: state.listExchangeRates,\n    selectAsk: state.selectAsk,\n    selectBid: state.selectBid,\n    inputAsk: state.inputAsk,\n    inputBid: state.inputBid,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateSelectAsk: value => dispatch(updateSelectAsk(value)),\n    updateSelectBid: value => dispatch(updateSelectBid(value)),\n    updateInputAsk: value => dispatch(updateInputAsk(value)),\n    updateInputBid: value => dispatch(updateInputBid(value)),\n  };  \n}\n\nexport const CurrencyConverterContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(CurrencyConverter);\n","import React from 'react';\nimport './CurrencyConverter.css';\n\nexport default function CurrencyConverter(props) {\n  const {\n    listExchangeRates,\n    updateSelectBid,\n    updateInputBid,\n    updateSelectAsk,\n    updateInputAsk,\n    selectAsk,\n    selectBid,\n    inputBid,\n    inputAsk,\n  } = props;\n\n  if (listExchangeRates) {\n    const listCurrensies = listExchangeRates.map(item => (\n      <option value={item[1]} key={item[0]}>{item[0]}</option>\n    ));\n\n    return (\n      <div className=\"page-converter\">\n        <div className=\"content\">\n          <div className=\"page-converter__converter\">\n            <div className=\"page-converter__have\">\n              <div className=\"page-converter__label\">I HAVE</div>\n              <input\n                className=\"page-converter__input\"\n                type=\"text\"\n                onChange={e => updateInputBid(e.target.value)}\n                value={inputBid}\n              />\n              <select\n                name=\"bid\"\n                className=\"page-converter__select\"\n                onChange={e => updateSelectBid(e.target.value)}\n                value={selectBid}\n              >\n                {listCurrensies}\n              </select>\n            </div>\n            <div className=\"page-converter__want\">\n              <div className=\"page-converter__label\">I'LL GET</div>\n              <input\n                className=\"page-converter__input\"\n                type=\"text\"\n                onChange={e => updateInputAsk(e.target.value)}\n                value={inputAsk}\n              />\n              <select\n                name=\"ask\"\n                className=\"page-converter__select\"\n                onChange={e => updateSelectAsk(e.target.value)}\n                value={selectAsk}\n              >\n                {listCurrensies}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return 'Loading......';\n  }\n}\n","import React, { Component } from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport './Header.css';\n\nexport class Header extends Component {\n\n  componentDidMount() {\n    this.props.loadListExchangeRates();\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <div className=\"content\">\n          <div className=\"header__inner\">\n            <img\n              src=\"./images/logo.png\"\n              alt=\"currency exchange\"\n              className=\"header__logo\"\n            />\n            <div className=\"header__links\">\n              <Route>\n                <Link to=\"/\" className=\"header__link\">Currencies</Link>\n              </Route>\n              <Route>\n                <Link to=\"/converter\" className=\"header__link\">Converter</Link>\n              </Route>\n            </div>\n          </div>\n        </div>\n      </header>\n    )\n  }\n}\n","import {connect} from 'react-redux';\nimport {Header} from './Header';\nimport {loadListExchangeRates} from '../../store/actions';\n\nfunction mapStateToProps(state) {\n return {}\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadListExchangeRates: () => dispatch(loadListExchangeRates()),\n  }\n}\n\nexport const HeaderContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(Header);\n","import React from 'react';\nimport './Footer.css';\n\nexport const Footer = () => (\n  <footer className=\"footer\">\n    <div className=\"content\">   \n\n      <div className=\"footer__bottom-part\">\n        <p className=\"footer__copyright\">\n          © 2019 Finance Inc.\n          </p>\n\n        <div className=\"footer__misc\">\n          <div className=\"footer__bottom-links links\">\n            <a href=\"##\" className=\"links__link\">\n              Privacy policy\n          </a>\n            <a href=\"##\" className=\"links__link\">\n              Terms of  use\n          </a>\n            <a href=\"##\" className=\"links__link\">\n              Pricing\n          </a>\n          </div>\n\n          <div className=\"footer__social social\">\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/tw.svg\" alt=\"Twitter\" />\n            </a>\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/ig.svg\" alt=\"Instagram\" />\n            </a>\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/fb.svg\" alt=\"Facebook\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </footer>\n)\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducer';\nimport { ListExchangeRatesContainer }\n  from './components/ListExchangeRates/ListExchangeRatesContainer';\nimport { CurrencyConverterContainer }\n  from './components/CurrencyConverter/CurrencyConverterContainer';\nimport { HeaderContainer } from './components/Header/HeaderContainer';\nimport { Footer } from './components/Footer/Footer';\nimport './styles/index.css';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HeaderContainer />       \n        <Switch>\n          <Route path=\"/\" exact component={ListExchangeRatesContainer} />\n          <Route path=\"/converter\" component={CurrencyConverterContainer} />\n        </Switch>\n        <Footer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}