{"version":3,"sources":["store/actions.js","store/reducer.js","components/ListExchangeRates/ListExchangeRates.js","components/ListExchangeRates/ListExchangeRatesContainer.js","components/CurrencyConverter/CurrencyConverter.js","components/CurrencyConverter/CurrencyConverterContainer.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ACTION_TYPES","START_LOADING","STOP_LOADING","SAVE_LIST_EXCHANGE_RATES","IS_CHECKED","loadListExchangeRates","dispatch","type","fetch","then","res","json","data","rates","payload","catch","error","console","log","finally","initialState","isLoading","listExchangeRates","checkedCurrencies","ListExchangeRates","this","props","a","Object","entries","className","map","item","key","Component","ListExchangeRatesContainer","connect","state","CurrencyConverter","name","id","CurrencyConverterContainer","Header","src","alt","to","Footer","href","store","createStore","action","applyMiddleware","thunk","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c9647dd.chunk.js","sourcesContent":["export const ACTION_TYPES = {\n  START_LOADING: 'START_LOADING',\n  STOP_LOADING: 'STOP_LOADING',\n  SAVE_LIST_EXCHANGE_RATES: 'SAVE_LIST_EXCHANGE_RATES',\n  IS_CHECKED: 'IS_CHECKED',\n};\n\nconst urlExchangeRates =\n  'https://api.exchangeratesapi.io/latest';\n\nconst startLoading = () => ({\n  type: ACTION_TYPES.START_LOADING,\n});\n\nconst stopLoading = () => ({\n  type: ACTION_TYPES.STOP_LOADING,\n});\n\nconst saveListExchangeRates = data => ({\n  type: ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES,\n  payload: data\n})\n\nexport const loadListExchangeRates = () => dispatch => {\n  dispatch(startLoading());\n\n  fetch(urlExchangeRates)\n    .then(res => res.json())\n    .then(( { rates } ) => {\n      dispatch(saveListExchangeRates(rates))\n    })\n    .catch(error => console.log(error))\n    .finally(() => dispatch(stopLoading()))\n};\n\nexport const isChecked = id => ({\n  type: ACTION_TYPES.IS_CHECKED,\n  payload: id\n});\n","import { ACTION_TYPES } from './actions';\n\nconst initialState = {\n  isLoading: false,\n  listExchangeRates: null,\n  checkedCurrencies: [],\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTION_TYPES.START_LOADING: {\n      return {\n        ...state,\n        isLoading: true,\n      };\n    }\n\n    case ACTION_TYPES.STOP_LOADING: {\n      return {\n        ...state,\n        isLoading: false,\n      };\n    }\n\n    case ACTION_TYPES.SAVE_LIST_EXCHANGE_RATES: {\n      const { payload } = action;\n   \n      return {\n        ...state,\n        listExchangeRates: payload,\n      };\n    }\n\n    case ACTION_TYPES.IS_CHECKED: {\n      const { payload } = action;\n\n      return {\n        ...state,\n\n      }\n    }\n    \n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport './ListExchangeRates.css';\n\nexport default class ListExchangeRates extends Component {\n  componentDidMount() {\n    this.props.loadListExchangeRates();\n  }\n\n  render() {\n    const { listExchangeRates } = this.props;\n    let a = [];\n    if (listExchangeRates) {\n      a = Object.entries(listExchangeRates);\n    }\n    return (\n      <div className=\"page-currencies\">\n        <div className=\"content\">\n    \n          {a.map(item => (\n            <div key={item[0]} className=\"page-currencies__list\">\n              <div className=\"page-currencies__currency\">{`${item[0]} : ${item[1]}`}</div>\n              <input\n                className=\"page-currencies__check\"\n                type=\"checkbox\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\n\n","import {connect} from 'react-redux';\nimport {loadListExchangeRates} from '../../store/actions';\nimport ListExchangeRates from './ListExchangeRates';\n\nfunction mapStateToProps(state) {\n  return {\n    listExchangeRates: state.listExchangeRates,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadListExchangeRates: () => dispatch(loadListExchangeRates()),\n  }  \n}\n\nexport const ListExchangeRatesContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(ListExchangeRates);\n","import React, { Component } from 'react';\n\nexport default class CurrencyConverter extends Component {\n  \n  render() {\n    console.log(this.props)\n    return (\n      <div className=\"page-converter\">\n        <div className=\"content\">\n          <div className=\"my\">\n            <select name=\"\" id=\"\" className=\"my\">list</select>\n            <input type=\"text\" />\n          </div>\n          <div className=\"want\">\n            <select name=\"\" id=\"\" className=\"my\">list</select>\n            <input type=\"text\" />\n          </div>\n\n        </div>\n\n      </div>\n    )\n  }\n}\n","import {connect} from 'react-redux';\nimport  CurrencyConverter from './CurrencyConverter';\n\n\nfunction mapStateToProps(state) {\n  return {\n    listExchangeRates: state.listExchangeRates,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \n  }  \n}\n\nexport const CurrencyConverterContainer = connect(\n  mapStateToProps, mapDispatchToProps\n)(CurrencyConverter);\n","import React, { Component } from 'react';\nimport { Link, BrowserRouter } from 'react-router-dom';\nimport './Header.css';\n\n\nexport class Header extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <header className=\"header\">\n          <div className=\"content\">\n            <div className=\"header__inner\">\n              <img\n                src=\"./images/logo.png\"\n                alt=\"currency exchange\"\n                className=\"header__logo\"\n              />\n              <div className=\"header__links\">\n                <Link to=\"/currencies\" className=\"header__link\">Currencies</Link>\n                <Link to=\"/converter\" className=\"header__link\">Converter</Link>\n              </div>\n            </div>\n          </div>\n        </header>\n      </BrowserRouter>\n    )\n  }\n}\n","import React from 'react';\nimport './Footer.css';\n\n\nexport const Footer = () => (\n  <footer className=\"footer\">\n    <div className=\"content\">\n   \n\n      <div className=\"footer__bottom-part\">\n        <p className=\"footer__copyright\">\n          Â© 2019 Finance Inc.\n          </p>\n\n        <div className=\"footer__misc\">\n          <div className=\"footer__bottom-links links\">\n            <a href=\"##\" className=\"links__link\">\n              Privacy policy\n          </a>\n            <a href=\"##\" className=\"links__link\">\n              Terms of  use\n          </a>\n            <a href=\"##\" className=\"links__link\">\n              Pricing\n          </a>\n          </div>\n\n          <div className=\"footer__social social\">\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/fb.svg\" alt=\"Facebook\" />\n            </a>\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/tw.svg\" alt=\"Twitter\" />\n            </a>\n            <a href=\"##\" className=\"social__link\">\n              <img src=\"./images/ig.svg\" alt=\"Instagram\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </footer>\n)\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducer';\nimport { ListExchangeRatesContainer }\n  from './components/ListExchangeRates/ListExchangeRatesContainer';\nimport { CurrencyConverterContainer }\n  from './components/CurrencyConverter/CurrencyConverterContainer';\nimport { Header } from './components/Header/Header';\nimport { Footer } from './components/Footer/Footer';\nimport './styles/index.css';\nimport { \n  Route,\n  Switch,\n  NavLink\n} from 'react-router-dom';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n     \n        <div className=\"App\">\n          <Header />\n          <NavLink to=\"/currencies\" className=\"header__link\">Currencies</NavLink>\n          <NavLink to=\"/converter\" className=\"header__link\">Converter</NavLink>\n          <Switch>\n            <Route path=\"/currencies\" component={ListExchangeRatesContainer} />\n            <Route path=\"/converter\" exact component={CurrencyConverterContainer} />\n          </Switch>\n          <Footer />\n        </div>\n     \n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}